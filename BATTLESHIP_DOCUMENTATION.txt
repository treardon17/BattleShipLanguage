////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
//  Battleship Language      ///////////////////////////////////////////////////////
//  Author: Tyler Reardon    ///////////////////////////////////////////////////////
//  Version: 1.0             ///////////////////////////////////////////////////////
//  Release date: 12/6/15    ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////
PLAYER CREATION:
////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------
KEYWORD:      computer

DESCRIPTION:
  Creates a variable of type computer that must be assigned a string name through the
newComputer() method described below.  Computers can play against other computers
to test different strategies.  They can also play against other players so games can
be played single player.

EXAMPLE:
  computer myComputer
    ^^        ^^
  keyword | name of variable to be referenced in code
------------------------------------------------------------------------------------
KEYWORD:      player

DESCRIPTION:
  Creates a variable of type player that must be assigned a string name through the
newPlayer() method described below.  Players can play against other players as well as
against computers.

EXAMPLE:
    player myPlayer
     ^^       ^^
  keyword | name of variable to be referenced in code
------------------------------------------------------------------------------------
KEYWORD:      newComputer()

DESCRIPTION:
  Assigns a name to the computer variable and initializes the computer player.

EXAMPLE:
    myComputer = newComputer("myComputerName")
      ^^            ^^            ^^
variable name |   keyword   |   name given to computer that will show up on screen of game
------------------------------------------------------------------------------------
KEYWORD:      newPlayer()

DESCRIPTION:
  Assigns a name to the player variable and initializes the player.

EXAMPLE:
    myComputer = newComputer("myComputerName")
      ^^            ^^            ^^
variable name |   keyword   |   name given to player that will show up on screen of game
------------------------------------------------------------------------------------



////////////////////////////////////////////////////////////////////////////////////
SYMBOLS:
////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------
SYMBOL:       ->
NAME:         Action Op
DESCRIPTION:
  Allows variables to call functions and interact with other variables

EXAMPLES:
  var->action()->var2
  var->action2()
------------------------------------------------------------------------------------
SYMBOL:       :
NAME:         Statement begin
DESCRIPTION:
  Signifies the beginning of a statement

EXAMPLES:
  statement_name:
------------------------------------------------------------------------------------



////////////////////////////////////////////////////////////////////////////////////
FUNCTIONS:
////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------
FUNCTION NAME:              addBoat()
PERTAINS TO:                computer and player types
ARGUMENTS:                  "type of boat",'col letter', row number, 'direction'
ARGUMENT DESCRIPTIONS:

  Type of boat:             specifies the length/type of the boat being placed
      "aircraftcarrier":    size 5
      "battleship":         size 4
      "submarine":          size 3
      "destroyer":          size 3
      "patrolboat":         size 2

  Col letter:               Any lowercase letter between 'a' and 'o',
                            specifying the vertical location on the grid

  Row number:               Any number number between 1 and 15,
                            specifying the horizontal location on the grid

  Direction:                'v' or 'h' corresponding to vertical and horizontal
                            specifying whether the boat should be placed vertically
                            or horizontally

FUNCTION DESCRIPTION:
    Places a boat of user specified type on a user specified grid point in a user specified direction.
  If placed vertically, the user specified grid point is the 'top' of the boat.  If placed horizontally
  the user specified grid point is the 'far left' of the boat.

EXAMPLE:
  var->addBoat("aircraftcarrier", 'a', 1, 'h')

  Has output (with the 1s signifying the boat number)

        A B C D E F G H I J K L M N O
    |1 |1 1 1 1 1 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |2 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |3 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |4 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |5 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |6 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |7 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |8 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |9 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |10|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |11|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |12|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |13|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |14|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |15|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙

------------------------------------------------------------------------------------
FUNCTION NAME:              randomlyAddBoats()
PERTAINS TO:                computer and player types
ARGUMENTS:                  number of total boats the user will end with
ARGUMENT DESCRIPTIONS:

  Number of boats:          an integer value

FUNCTION DESCRIPTION:
    Places randomly sized boats in random locations.  The boats are placed both
  vertically and horizontally in a random fashion.

EXAMPLE:
  var->randomlyAddBoats(9)

  Has output (with the #s on the grid signifying the boat number)

        A B C D E F G H I J K L M N O
    |1 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |2 |◙ ◙ ◙ ◙ ◙ ◙ 8 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |3 |◙ ◙ ◙ ◙ ◙ ◙ 8 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |4 |◙ ◙ ◙ ◙ ◙ ◙ 8 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |5 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |6 |◙ ◙ ◙ ◙ ◙ 6 6 6 ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |7 |◙ 2 2 2 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |8 |◙ ◙ ◙ ◙ ◙ 9 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |9 |◙ ◙ ◙ ◙ ◙ 9 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ 7
    |10|◙ ◙ ◙ ◙ ◙ 9 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ 7
    |11|◙ 5 ◙ ◙ 1 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ 7
    |12|◙ 5 ◙ ◙ 1 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |13|◙ 5 ◙ ◙ ◙ ◙ ◙ ◙ 3 3 3 3 ◙ ◙ ◙
    |14|◙ 5 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |15|◙ 4 4 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙

------------------------------------------------------------------------------------
FUNCTION NAME:              findsBoat()
PERTAINS TO:                computer type
ARGUMENTS:                  None
ARGUMENT DESCRIPTIONS:      None

FUNCTION DESCRIPTION:
    Returns true if a computer hits its opponent's boat and remains true until
  the computer sinks a boat.

EXAMPLE:
  if var->findsBoat():
    do this...
  endif.
------------------------------------------------------------------------------------
UNCTION NAME:                   seek()
PERTAINS TO:                    computer type
ARGUMENTS:                      horizontal seek distance, vertical seek distance
ARGUMENT DESCRIPTIONS:

    Horizontal seek distance:   The distance the computer will try to attack from its
                                attack point horizontally

    Vertical seek distance:     The distance the computer will try to seek vertically
                                once it has completed the full row horizontally

FUNCTION DESCRIPTION:
    The seek function starts in a random location and then seeks horizontally until
  it hits the edge of the grid.  If the computer tries to hit a place it has already
  tried, it looks for the next available place on the grid.

EXAMPLE:
  var->seek(2,2)->var2
  ^^                ^^
  attacker          attacked
------------------------------------------------------------------------------------
FUNCTION NAME:                   trySink()
PERTAINS TO:                    computer type
ARGUMENTS:                      direction, seek distance
ARGUMENT DESCRIPTIONS:

    Direction:                  The direction the computer will try to attack
      "left"
      "right"
      "up"
      "down"

    Seek Distance:              The distance the computer will try to seek in the direction
                                specified by the direction argument

FUNCTION DESCRIPTION:
    The trySink function will continue in the specified direction until it sinks a boat.

EXAMPLE:
  var->trySink("left",2)->var2
  ^^                       ^^
  attacker               attacked
------------------------------------------------------------------------------------
UNCTION NAME:                   show()
PERTAINS TO:                    computer and player types
ARGUMENTS:                      None
ARGUMENT DESCRIPTIONS:          None

FUNCTION DESCRIPTION:
    Shows the player's boats and previous tries. The top grid represents previous tries.
  Diamonds represent misses, circles represent hits, and squares represent grid points
  that have not been attempted yet.  The bottom grid represents the player's personal
  grid.  The number represents the boat number.  The output will be yellow if the boat
  grid point hasn't been hit yet, but it will show red if it has been hit.

EXAMPLE:
  var->show()

  Has potential output:

    -------------------------------------
      Player name: var

        A B C D E F G H I J K L M N O
    |1 |◊ ◊ ◉ ◉ ◊ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |2 |◙ ◙ ◊ ◊ ◙ ◊ ◊ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙
    |3 |◊ ◊ ◉ ◉ ◉ ◉ ◉ ◉ ◉ ◊ ◊ ◉ ◉ ◉ ◊
    |4 |◊ ◙ ◊ ◙ ◊ ◙ ◊ ◊ ◙ ◊ ◙ ◊ ◊ ◙ ◊
    |5 |◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊
    |6 |◊ ◙ ◊ ◙ ◊ ◙ ◊ ◊ ◉ ◉ ◉ ◉ ◉ ◊ ◙
    |7 |◊ ◙ ◊ ◙ ◉ ◙ ◊ ◊ ◊ ◊ ◙ ◊ ◙ ◊ ◙
    |8 |◊ ◙ ◊ ◙ ◉ ◊ ◊ ◉ ◉ ◉ ◊ ◙ ◊ ◙ ◊
    |9 |◊ ◙ ◊ ◙ ◉ ◊ ◙ ◊ ◙ ◊ ◊ ◊ ◙ ◊ ◙
    |10|◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◊ ◉ ◉ ◉ ◉ ◊
    |11|◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◊ ◙ ◊ ◙
    |12|◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊
    |13|◊ ◙ ◊ ◙ ◊ ◊ ◉ ◉ ◉ ◊ ◙ ◊ ◙ ◊ ◙
    |14|◊ ◙ ◊ ◙ ◊ ◙ ◊ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙
    |15|◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊ ◙ ◊
        A B C D E F G H I J K L M N O
    |1 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |2 |◙ ◙ ◙ ◙ ◙ ◙ ◙ 8 8 ◙ ◙ ◙ ◙ ◙ ◙
    |3 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ 2 2 2 ◙
    |4 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |5 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |6 |◙ ◙ ◙ ◙ 7 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |7 |◙ ◙ ◙ ◙ 7 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |8 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |9 |◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ 3 3 3 3 3 ◙
    |10|◙ ◙ ◙ ◙ 5 5 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |11|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    |12|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ 9 9 ◙ ◙ ◙ 4
    |13|◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ 4
    |14|◙ ◙ ◙ ◙ ◙ ◙ 1 1 ◙ ◙ ◙ ◙ ◙ ◙ 4
    |15|◙ 6 6 6 6 ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙ ◙
    _____________________________________
    var's Stats:
    Successful Hits: 30
    Successful Sinks: 9
    Misses: 108
    opponent has 9 boats
    opponent has 0 boats left
    _____________________________________
    opponent hit you 13 time(s)
    opponent sank 4 of your boats
    You have 9 boat(s)
    You have 5 boat(s) left
    _____________________________________
------------------------------------------------------------------------------------
UNCTION NAME:                   attackBoat()
PERTAINS TO:                    computer and player types
ARGUMENTS:                      "grid point"
ARGUMENT DESCRIPTIONS:
    A single alphabetic character between 'a' and 'o' followed by a number between 0 and 15.
  The argument should appear in double quotes and there should be no spaces between the character
  and the number.

FUNCTION DESCRIPTION:
    This function allows a predetermined grid point to be attacked.  The given argument will be the
  point attacked.  If no grid point is given and rather an empty string ("") is given, user input will
  be required.  This is useful for human players attacking at runtime.

EXAMPLE:
  var->attackBoat("a1")->var2                     --> attacks boat at point a1
  ^^                       ^^
  attacker               attacked

  var->attackBoat("")->var2                       --> prompts for user input
  ^^                    ^^
  attacker            attacked
------------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////////////////
LOGICAL OPERATORS:
////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------
OPERATOR:     loop
REQUIREMENTS: endloop. is needed to denote the ending line of the loop.
DESCRIPTION:
    Allows for performing operations multiple times in the code until a condition is met.
  Unless the user knows exactly how many turns it will take to defeat the opponent, a loop
  is necessary to play the game in its entirety.  The loop will execute until one player
  sinks every boat the opponent has.

EXAMPLE:
  loop:
      actions to loop...
  endloop.
------------------------------------------------------------------------------------
OPERATOR:     if/else
REQUIREMENTS: endif. and endelse. are needed to denote the ending line of the conditional.
DESCRIPTION:
    Allows for logical decisions to be made at runtime.  Currently only supports predetermined
  boolean values such as findsBoat().  If the condition is met, the code between the if/endif. will
  be executed, otherwise that code will be skipped.  If an else statement follows the endif., that block
  of code will be executed if the condition wasn't met.

EXAMPLE:
  if var->findsBoat():
    do stuff here...
  endif.
  else:
    do other stuff here...
  endelse.
------------------------------------------------------------------------------------
OPERATOR:     begintry/try
REQUIREMENTS: endtry. is needed to terminate the try block, priority # required to
              specify which statement will be tried in which order.

DESCRIPTION:
    A try block is similar to an if statement, but it doesn't take a user specified condition.
  The try block is designed to work inside of a loop. Each iteration through the loop every statement
  will be examined to see if it has been executed yet. The highest priority statement that has not
  yet been executed, will be executed during that iteration through the loop. If that statement still
  evaluates to true after it has been executed, it will be executed again during the next iteration through
  the loop.

EXAMPLE:

  This try block will first try to sink var2's boat by going left one space at a time. If var successfully hits
var2, it will continue in that direction, otherwise it will evaluate to false and change direction to right and so on.

  begintry:
    1.try: var->trySink("left", 1)->var2
    2.try: var->trySink("right", 1)->var2
    3.try: var->trySink("up"), 1)->var2
    4.try: var->trySink("down", 1)->var2
  endtry.
------------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////////////////
EXAMPLE PROGRAMS:
////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------
computer Vlad
computer Putin
Vlad = newComputer("Vlad")
Putin = newComputer("Putin")
Vlad->addBoat("patrolboat", 'g', 14, 'h')
Vlad->randomlyAddBoats(9)
Putin->randomlyAddBoats(9)
loop:
  if Vlad->findsBoat():
    begintry:
      1.try: Vlad->trySink("left",1)->Putin
      2.try: Vlad->trySink("right",1)->Putin
      3.try: Vlad->trySink("up",1)->Putin
      4.try: Vlad->trySink("down",1)->Putin
    endtry.
  endif.
  else:
    Vlad->seek(2,1)->Putin
  endelse.

  if Putin->findsBoat():
    Putin->trySink("up",1)->Vlad
  endif.
  else:
    Putin->seek(2,1)->Vlad
  endelse.
endloop.

Putin->show()
Vlad->show()
------------------------------------------------------------------------------------
player Tyler
computer Putin
Tyler = newPlayer("Tyler")
Putin = newComputer("Putin")
Tyler->randomlyAddBoats(9)
Putin->randomlyAddBoats(9)
loop:
  Tyler->attack("")->Putin
  if Putin->findsBoat():
    begintry:
      1.try: Putin->trySink("left",1)->Tyler
      2.try: Putin->trySink("right",1)->Tyler
      3.try: Putin->trySink("up",1)->Tyler
      4.try: Putin->trySink("down",1)->Tyler
    endtry.
    Putin->show()
  endif.
  else:
    Putin->seek(3,1)->Tyler
  endelse.
endloop.
------------------------------------------------------------------------------------
computer Vlad
computer Putin
Vlad = newComputer("Vlad")
Putin = newComputer("Putin")
Vlad->addBoat("patrolboat", 'g', 14, 'h')
Vlad->randomlyAddBoats(9)
Putin->randomlyAddBoats(9)
loop:
  if Vlad->findsBoat():
    begintry:
      1.try: Vlad->trySink("left",1)->Putin
      2.try: Vlad->trySink("right",1)->Putin
      3.try: Vlad->trySink("up",1)->Putin
      4.try: Vlad->trySink("down",1)->Putin
    endtry.
  endif.
  else:
    Vlad->seek(2,2)->Putin
  endelse.

  Putin->seek(4,4)->Vlad

endloop.

Putin->show()
Vlad->show()
------------------------------------------------------------------------------------
